import numpy as np
import onnx
import os
import glob
import helpers.helper_funcs as helpers
import warnings
from onnx_tf.backend import prepare

from onnx import numpy_helper

import tensorflow as tf

def mobilenet_postprocess(scores): 
    '''
    Postprocessing with mxnet gluon
    The function takes scores generated by the network and returns the class IDs in decreasing order
    of probability
    '''
    prob = tf.nn.softmax(scores).numpy()
    prob = np.squeeze(prob)
    a = np.argsort(prob)[::-1]
    return a

def mobilenet(test_data_dir='onnx_models/mobilenetv2-1.0/test_data_set_0'):
    '''
    Version: mobilenetv2-1.0
    '''
    warnings.filterwarnings('ignore') # Ignore all the warning messages 
    onnx_model = onnx.load('onnx_models/mobilenetv2-1.0/mobilenetv2-1.0.onnx')  # load onnx model
    tf_rep = prepare(onnx_model) # Import the ONNX model to Tensorflow

    # Load inputs
    inputs = []
    inputs_num = len(glob.glob(os.path.join(test_data_dir, 'input_*.pb')))
    for i in range(inputs_num):
        input_file = os.path.join(test_data_dir, 'input_{}.pb'.format(i))
        tensor = onnx.TensorProto()
        with open(input_file, 'rb') as f:
            tensor.ParseFromString(f.read())
        inputs.append(numpy_helper.to_array(tensor))

    # Load reference outputs
    ref_outputs = []
    ref_outputs_num = len(glob.glob(os.path.join(test_data_dir, 'output_*.pb')))
    for i in range(ref_outputs_num):
        output_file = os.path.join(test_data_dir, 'output_{}.pb'.format(i))
        tensor = onnx.TensorProto()
        with open(output_file, 'rb') as f:
            tensor.ParseFromString(f.read())
        ref_outputs.append(numpy_helper.to_array(tensor))

    # Run the model on the backend
    outputs = tf_rep.run(inputs)[0]

    outputs = mobilenet_postprocess(outputs)
    # print(outputs[:10,:])
    print(outputs.shape)
    # print(outputs[0,0])
    print(outputs[:10])

    # Compare the results with reference outputs.
    # i = 0
    # for ref_o, o in zip(ref_outputs, outputs):
    #     print(i, ref_o.shape, o.shape)
    #     i = i + 1
        # print(np.allclose(ref_o, o, atol=1e-3, rtol=1e-3))
        # np.testing.assert_almost_equal(ref_o, o, decimal=5)


def resnet(test_data_dir='onnx_models/mobilenetv2-1.0/test_data_set_0'):
    pass

def main():

    # mobilenet()
    pass

if __name__ == '__main__':
    main()
